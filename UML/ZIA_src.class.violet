<?xml version="1.0" encoding="UTF-8"?>
<java version="1.6.0_0" class="java.beans.XMLDecoder">
 <object class="com.horstmann.violet.ClassDiagramGraph">
  <void method="addNode">
   <object class="com.horstmann.violet.ClassNode">
    <void property="attributes">
     <void property="text">
      <string>private:
  ZiaSocket*	_socket;
  Parser	_parser;
  std::string	port;
  Transaction	transaction;
  bool		header_modified;</string>
     </void>
    </void>
    <void property="methods">
     <void property="text">
      <string>  Client(){};
  Client&amp;	operator=(const Client&amp;){return *this;};
public:
  ~Client();
  Client(ZiaSocket*, int);
  void		Run(void);
  void		doHookRequestHeaderModifier(Transaction&amp;);
  void		doHookRequestBodyModifier(Transaction&amp;, std::istream&amp;, std::ostream&amp;);
  void		doHookResponseProcessor(Transaction&amp;, std::istream&amp;, std::ostream&amp;);
  void		doHookResponseHeaderModifier(Transaction&amp;);
  void		doHookResponseBodyModifier(Transaction&amp;, std::istream&amp;, std::ostream&amp;);
  bool		checkRequestValidity(Transaction&amp;);
  void		checkResponseValidity(Transaction&amp;);
  void		setResponseContentLength(Transaction&amp;, std::iostream&amp;);
  void		sendResponse(Transaction&amp;, std::stringbuf&amp;);
  void		simplifyUri(Transaction&amp;);
  void		exit(void);</string>
     </void>
    </void>
    <void property="name">
     <void property="text">
      <string>Client</string>
     </void>
    </void>
   </object>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>104.0</double>
     <double>8.0</double>
    </void>
   </object>
  </void>
  <void method="addNode">
   <object class="com.horstmann.violet.ClassNode">
    <void property="attributes">
     <void property="text">
      <string>private:
  std::map&lt;Key, Value&gt; headers;</string>
     </void>
    </void>
    <void property="methods">
     <void property="text">
      <string>Header(const Header&amp;){};
Header&amp;	operator=(const Header&amp;);
public:
  Header(){};
  ~Header(){};
  virtual bool	getValue(const Key&amp; k, Value &amp; value) const;
  virtual void	setValue(const Key &amp; k, const Value &amp; value);
  virtual const Value&amp;	operator[](const Key &amp; k) const;
  virtual Value&amp;	operator[](const Key &amp; k);
  virtual void	deleteKey(const Key&amp; k);
  void		clear(void);
  const std::map&lt;Key, Value&gt;&amp;	getAllHeaders() const;</string>
     </void>
    </void>
    <void property="name">
     <void property="text">
      <string>Header</string>
     </void>
    </void>
   </object>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>630.0</double>
     <double>30.0</double>
    </void>
   </object>
  </void>
  <void method="addNode">
   <object class="com.horstmann.violet.ClassNode">
    <void property="methods">
     <void property="text">
      <string>private:
  ModuleManager();
  ~ModuleManager();
  ModuleManager(const ModuleManager&amp;);
  ModuleManager&amp; operator=(const ModuleManager&amp;);
public:
  void LoadAll(const std::string&amp;);
  void LoadModule(const std::string&amp;);
  void UnloadAll(void);
  bool isModuleLoaded(const std::string&amp;);
  bool configureModule(const std::string&amp;);
  void unloadModule(const std::string&amp;);
  static ModuleManager&amp; Inst();
  std::map&lt;std::string, zia::api::IModule* &gt;&amp;	getModules(void);
private:
  std::map&lt;std::string, zia::api::IModule* &gt; modules;
  // std::map&lt;zia::api::handler::EHook, std::vector&lt;zia::api::handler::IHandler *&gt; &gt; listhandler;
  static ModuleManager*		pInstance;</string>
     </void>
    </void>
    <void property="name">
     <void property="text">
      <string>ModuleManager</string>
     </void>
    </void>
   </object>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>492.0</double>
     <double>307.0</double>
    </void>
   </object>
  </void>
  <void method="addNode">
   <object class="com.horstmann.violet.ClassNode">
    <void property="attributes">
     <void property="text">
      <string>private:
  std::string buffer;
  Request	info;
  State		state;</string>
     </void>
    </void>
    <void property="methods">
     <void property="text">
      <string>  Parser(const Parser&amp;){};
  Parser	operator=(const Parser&amp;){return *this;};
public:
  enum State
    {
      parserequest,
      parseheader,
      parsebody,
      finished
    };

  Parser();
  ~Parser(){};
  State		Consume(const char*, Transaction&amp;, std::iostream&amp;);
  void		parseRequest(std::string, Transaction&amp;);
  void		parseHeader(std::string, Transaction&amp;);
  void		parseBody(const std::string&amp;, Transaction&amp;, std::iostream&amp;);
  void		initInfo(void);
  void		setState(State);</string>
     </void>
    </void>
    <void property="name">
     <void property="text">
      <string>Parser</string>
     </void>
    </void>
   </object>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>987.0</double>
     <double>503.0</double>
    </void>
   </object>
  </void>
  <void method="addNode">
   <object class="com.horstmann.violet.ClassNode">
    <void property="attributes">
     <void property="text">
      <string>private:
  StatusCode				status_code;
  std::string				status_message;
  std::string				version;
  Header				headers;</string>
     </void>
    </void>
    <void property="methods">
     <void property="text">
      <string>Response(const Response&amp;){};
  Response&amp;				operator=(const Response&amp;){return *this;};
public:
  Response(){};
  ~Response(){};
  StatusCode				getStatusCode(void) const;
  const std::string&amp;			getStatusMessage(void) const;
  const std::string&amp;			getVersion(void) const;
  void					setStatusCode(StatusCode code);
  void					setStatusMessage(const std::string &amp; msg);
  void					setVersion(const std::string &amp; v);
  const zia::api::http::IHeader&amp;	getHeaders(void) const;
  zia::api::http::IHeader&amp;		getHeaders(void);
  void					clear();</string>
     </void>
    </void>
    <void property="name">
     <void property="text">
      <string>Response</string>
     </void>
    </void>
   </object>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>61.0</double>
     <double>178.0</double>
    </void>
   </object>
  </void>
  <void method="addNode">
   <object class="com.horstmann.violet.ClassNode">
    <void property="attributes">
     <void property="text">
      <string>private:
  std::map&lt;std::string, method_ptr&gt; methods;
  Transaction* trans;
  std::ostream*	os;
  std::istream*	is;</string>
     </void>
    </void>
    <void property="methods">
     <void property="text">
      <string> ResponseBuilder(){};
 ResponseBuilder&amp;	operator=(const ResponseBuilder&amp;);
public:
  ResponseBuilder(Transaction&amp;, std::istream&amp;, std::ostream&amp;);
  ~ResponseBuilder(){};
  void		buildResponse(void);
  void		defaultURI(void);
  bool		checkHttpVersion(void);
  std::string	createBody(const char *) const;
  bool		checkImplementedMethod(void);
  bool		checkPermission(const std::string&amp;);
  void		notFound(const std::string&amp;);
  void		movedPermanently(const std::string&amp;);
  void		permissionDenied(const std::string&amp;);
  std::string	buildFilename(void);
  std::vector&lt;std::string&gt;*		directoryList(const std::string&amp; directory_name);
  void		directoryListing(const std::string&amp;);
  const std::string	tryDefaultFile(const std::string&amp;);
  void		sendFile(const std::string&amp;);
  bool		doGet(void);
  bool		doHead(void);</string>
     </void>
    </void>
    <void property="name">
     <void property="text">
      <string>ResponseBuilder</string>
     </void>
    </void>
   </object>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>907.0</double>
     <double>40.0</double>
    </void>
   </object>
  </void>
  <void method="addNode">
   <object class="com.horstmann.violet.ClassNode">
    <void property="attributes">
     <void property="text">
      <string>private:
 std::vector&lt;Client*&gt; clients;
  ZiaSocket	s_listen;
  int		port;</string>
     </void>
    </void>
    <void property="methods">
     <void property="text">
      <string>public:

  Server(int p);
  Server();
  Server(const Server&amp; ref);
  ~Server(void);
  void			Run(void);
  int			getPort(void);
  std::string		getPortStr(void);
  void			setPort(int);
  void			exit(void);
private:
  void			WaitForClientLoop();
  void			putOnThread(ZiaSocket*)
;private:
  void			WaitForClientLoop();
  void			putOnThread(ZiaSocket*);
  Server&amp;		operator=(const Server&amp; ref);
</string>
     </void>
    </void>
    <void property="name">
     <void property="text">
      <string>Server</string>
     </void>
    </void>
   </object>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>614.0</double>
     <double>491.0</double>
    </void>
   </object>
  </void>
  <void method="addNode">
   <object class="com.horstmann.violet.ClassNode">
    <void property="attributes">
     <void property="text">
      <string>private:
  std::string	method;
  std::string	uri;
  std::string	version;
  Header	headers;</string>
     </void>
    </void>
    <void property="methods">
     <void property="text">
      <string>  Request(const Request&amp;){};
  Request&amp;				operator=(const Request&amp;){return *this;};
public:
  Request(){};
  ~Request(){};

  const std::string&amp;			getMethod(void) const;
  void					setMethod(const std::string &amp; m);
  const std::string&amp;			getUri(void) const;
  void					setUri(const std::string &amp; u);
  const std::string&amp;			getVersion(void) const;
  void					setVersion(const std::string &amp; v);
  const zia::api::http::IHeader&amp;	getHeaders(void) const;
  zia::api::http::IHeader&amp;		getHeaders(void);
  void					clear(void);</string>
     </void>
    </void>
    <void property="name">
     <void property="text">
      <string>Request</string>
     </void>
    </void>
   </object>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>771.0</double>
     <double>520.0</double>
    </void>
   </object>
  </void>
  <void method="addNode">
   <object class="com.horstmann.violet.ClassNode">
    <void property="attributes">
     <void property="text">
      <string>private:
  Request				request;
  Response				response;
  ZiaSocket*				client_endpoint;
  ZiaSocket*				server_endpoint;</string>
     </void>
    </void>
    <void property="methods">
     <void property="text">
      <string>  Transaction(const Transaction&amp;){};
  Transaction&amp;				operator=(const Transaction&amp;){return *this;};
public:
  Transaction(){};
  ~Transaction(){};
  const zia::api::http::IRequest&amp;	getRequest(void) const;
  const zia::api::http::IResponse&amp;	getResponse(void) const;
  const zia::api::network::IEndPoint&amp;	getClientEndPoint(void) const;
  const zia::api::network::IEndPoint&amp;	getServerEndPoint(void) const;;
  zia::api::http::IRequest&amp;		getRequest(void);
  zia::api::http::IResponse&amp;		getResponse(void);
  zia::api::network::IEndPoint&amp;		getClientEndPoint(void);
  zia::api::network::IEndPoint&amp;		getServerEndPoint(void);
  void					clear();
  void					setServerEndPoint(ZiaSocket* ie);
  void					setClientEndPoint(ZiaSocket* ie;</string>
     </void>
    </void>
    <void property="name">
     <void property="text">
      <string>Transaction</string>
     </void>
    </void>
   </object>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>1101.0</double>
     <double>131.0</double>
    </void>
   </object>
  </void>
  <void method="addNode">
   <object class="com.horstmann.violet.ClassNode">
    <void property="attributes">
     <void property="text">
      <string>private:
  std::vector&lt;Server *&gt; servers;
  void	startUnstartedServs(void);
  void	stopUnconfigedServs(void);
  bool	isServerStarted(std::map&lt;std::string, std::string&gt;);
  bool	isServerConfiged(Server*);</string>
     </void>
    </void>
    <void property="methods">
     <void property="text">
      <string> Zia(const Zia&amp;){};
  Zia&amp;	operator=(const Zia&amp;){return *this;};
public:
  Zia();
  ~Zia();
  void	reloadConf(void);
  void	updateServers(void);
  void	exit(void);
  void	loadModules(void);
</string>
     </void>
    </void>
    <void property="name">
     <void property="text">
      <string>Zia</string>
     </void>
    </void>
   </object>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>188.0</double>
     <double>250.0</double>
    </void>
   </object>
  </void>
  <void method="addNode">
   <object class="com.horstmann.violet.ClassNode">
    <void property="attributes">
     <void property="text">
      <string>private:
  std::string buffer;
  Request	info;
  State		state;
</string>
     </void>
    </void>
    <void property="methods">
     <void property="text">
      <string>  Parser(const Parser&amp;){};
  Parser	operator=(const Parser&amp;);
public:
  enum State
    {
      parserequest,
      parseheader,
      parsebody,
      finished
    };

  Parser();
  ~Parser(){};
  State		Consume(const char*, Transaction&amp;, std::iostream&amp;);
  void		parseRequest(std::string, Transaction&amp;);
  void		parseHeader(std::string, Transaction&amp;);
  void		parseBody(const std::string&amp;, Transaction&amp;, std::iostream&amp;);
  void		initInfo(void);
  void		setState(State);</string>
     </void>
    </void>
    <void property="name">
     <void property="text">
      <string>Parser</string>
     </void>
    </void>
   </object>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>138.0</double>
     <double>503.0</double>
    </void>
   </object>
  </void>
  <void method="addNode">
   <object class="com.horstmann.violet.DiagramLinkNode"/>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>840.7694303069238</double>
     <double>920.446307012106</double>
    </void>
   </object>
  </void>
  <void method="addNode">
   <object class="com.horstmann.violet.DiagramLinkNode">
    <void property="diagramLink">
     <object class="com.horstmann.violet.framework.diagram.DiagramLink">
      <void property="URL">
       <object class="java.net.URL">
        <string>file</string>
        <string></string>
        <int>-1</int>
        <string>/home/hyperion/zia_thread_uml.class.violet</string>
       </object>
      </void>
      <void property="openFlag">
       <boolean>true</boolean>
      </void>
     </object>
    </void>
   </object>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>548.2244800162543</double>
     <double>866.9319868369835</double>
    </void>
   </object>
  </void>
 </object>
</java>
