<?xml version="1.0" encoding="UTF-8"?>
<java version="1.6.0_0" class="java.beans.XMLDecoder">
 <object class="com.horstmann.violet.ClassDiagramGraph">
  <void method="addNode">
   <object id="InterfaceNode0" class="com.horstmann.violet.InterfaceNode">
    <void property="methods">
     <void property="text">
      <string>public:
  virtual		~IAbsSocket(){};
  virtual bool		createSocket(int af, int type, int protocol) = 0;
  virtual void		close() = 0;
  virtual bool		bind(int port) = 0;
  virtual int		send(const char *buff, int size_to_sendl) = 0;
  virtual int		recv(char *buff, int size_max_to_recv) = 0;
  virtual int		listen(int backlog) = 0;
  virtual int		waitForReading(int timeout) = 0;
  Port			getPort() const;
  Socket		getSocket() const;
  const Ip&amp;			getIp() const;
  void			setPort(Port p);
protected:
  Port	port;
  Ip	ip;
  Socket socket;</string>
     </void>
    </void>
    <void property="name">
     <void property="text">
      <string>IAbsSocket</string>
     </void>
    </void>
   </object>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>478.0</double>
     <double>47.0</double>
    </void>
   </object>
  </void>
  <void method="addNode">
   <object id="ClassNode0" class="com.horstmann.violet.ClassNode">
    <void property="attributes">
     <void property="text">
      <string>private:
 label_in		_sockaddr;</string>
     </void>
    </void>
    <void property="methods">
     <void property="text">
      <string>public:
  IUSocket(int af = AF_INET, int type = SOCK_STREAM, int protocol = IPPROTO_TCP);
  IUSocket(zia::api::network::IEndPoint*);
  IUSocket(const IUSocket&amp; ref);
  IUSocket(Socket&amp;, int, int, int, int);
  ~IUSocket();

  IUSocket&amp;		operator=(const IUSocket&amp; ref);
 protected:
  bool			createSocket(int af, int type, int protocol);
 public:
  void			close();
  bool			bind(int port);
  bool			connect(const std::string &amp;to_connect, int port);
  IUSocket*		accept();
  int			send(const char *buff, int size_to_sendl);
  int			recv(char *buff, int size_max_to_recv);
  void			setSocket(mysocket);
  int			listen(int);
  int			waitForReading(int timeout);</string>
     </void>
    </void>
    <void property="name">
     <void property="text">
      <string>IUSocket</string>
     </void>
    </void>
   </object>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>120.0</double>
     <double>367.0</double>
    </void>
   </object>
  </void>
  <void method="addNode">
   <object id="ClassNode1" class="com.horstmann.violet.ClassNode">
    <void property="attributes">
     <void property="text">
      <string> private:
  WSADATA			_wsaData;
  static int			_nb_socket;
  mysocket			_socket;
  label_in			_sockaddr;</string>
     </void>
    </void>
    <void property="methods">
     <void property="text">
      <string>public:
  IWSocket(int af = AF_INET, int type = SOCK_STREAM, int protocol = IPPROTO_TCP);
  IWSocket(const IWSocket&amp; ref);
  IWSocket(mysocket&amp; socket);
  ~IWSocket(void);

  IWSocket&amp;			operator=(const IWSocket&amp; ref);
 protected:
  bool				createSocket(int af, int type, int protocol);
 public:
  void				close();
  bool				bind(int port);
  bool				connect(const std::string &amp;to_connect, int port);
  IWSocket*			accept();
  int				send(const char *buff, int size_to_sendl);
  int				recv(char *buff, int size_max_to_recv);
  int			        recvfrom(char *buff, int size_to_recv, label* from);
  int				sendto(const char *buff, int size_to_send, label* to);
  mysocket&amp;			getSocket();
  int				listen(int backlog = SOMAXCONN);
  int				waitForReading(int timeout);</string>
     </void>
    </void>
    <void property="name">
     <void property="text">
      <string>IWSocket</string>
     </void>
    </void>
   </object>
   <object class="java.awt.geom.Point2D$Double">
    <void method="setLocation">
     <double>676.0</double>
     <double>365.0</double>
    </void>
   </object>
  </void>
  <void method="connect">
   <object class="com.horstmann.violet.ClassRelationshipEdge">
    <void property="bentStyle">
     <object class="com.horstmann.violet.BentStyle" field="VHV"/>
    </void>
    <void property="endArrowHead">
     <object class="com.horstmann.violet.ArrowHead" field="TRIANGLE"/>
    </void>
   </object>
   <object idref="InterfaceNode0"/>
   <object idref="ClassNode0"/>
  </void>
  <void method="connect">
   <object class="com.horstmann.violet.ClassRelationshipEdge">
    <void property="bentStyle">
     <object class="com.horstmann.violet.BentStyle" field="HVH"/>
    </void>
    <void property="endArrowHead">
     <object class="com.horstmann.violet.ArrowHead" field="TRIANGLE"/>
    </void>
   </object>
   <object idref="InterfaceNode0"/>
   <object idref="ClassNode1"/>
  </void>
 </object>
</java>
